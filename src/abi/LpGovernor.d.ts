/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LpGovernorInterface extends ethers.utils.Interface {
  functions: {
    "SIGNATURE_PERPETUAL_SETTLE()": FunctionFragment;
    "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR()": FunctionFragment;
    "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "criticalQuorumRate()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "executionDelay()": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getMinter()": FunctionFragment;
    "getProposalThreshold()": FunctionFragment;
    "getQuorumVotes(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "getReward()": FunctionFragment;
    "getTarget()": FunctionFragment;
    "getUnlockBlock(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,address,address,address,address)": FunctionFragment;
    "isCriticalFunction(string)": FunctionFragment;
    "isLocked(address)": FunctionFragment;
    "isLockedByVoting(address)": FunctionFragment;
    "lastBlockRewardApplicable()": FunctionFragment;
    "lastMintBlock(address)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "poolCreator()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalThresholdRate()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(string[],bytes[],string)": FunctionFragment;
    "proposeToUpgradeAndCall(bytes32,bytes,bytes,string)": FunctionFragment;
    "quorumRate()": FunctionFragment;
    "rewardDistribution()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "setRewardRate(uint256)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlockDelay()": FunctionFragment;
    "userRewardPerTokenPaid(address)": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SIGNATURE_PERPETUAL_SETTLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "criticalQuorumRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMinter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTarget", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnlockBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCriticalFunction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isLockedByVoting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBlockRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMintBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThresholdRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeToUpgradeAndCall",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "SIGNATURE_PERPETUAL_SETTLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "criticalQuorumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTarget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCriticalFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLockedByVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBlockRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMintBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThresholdRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeToUpgradeAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorumRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExecuteTransaction(bytes32,address,string,bytes,uint256)": EventFragment;
    "ProposalCreated(uint256,address,address,string[],bytes[],uint256,uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "RewardAdded(uint256,uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "RewardRateChanged(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VoteCast(address,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export class LpGovernor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LpGovernorInterface;

  functions: {
    SIGNATURE_PERPETUAL_SETTLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "SIGNATURE_PERPETUAL_SETTLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    SIGNATURE_PERPETUAL_TRANSFER_OPERATOR(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    SIGNATURE_PERPETUAL_UPGRADE_AND_CALL(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    criticalQuorumRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "criticalQuorumRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    executionDelay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "executionDelay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
    }>;

    getMinter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getMinter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getProposalThreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getProposalThreshold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReceipt(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    getReward(overrides?: Overrides): Promise<ContractTransaction>;

    "getReward()"(overrides?: Overrides): Promise<ContractTransaction>;

    getTarget(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getTarget()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getUnlockBlock(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUnlockBlock(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(string,string,address,address,address,address)"(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isLocked(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isLocked(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isLockedByVoting(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isLockedByVoting(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastBlockRewardApplicable(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastBlockRewardApplicable()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastMintBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastMintBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastUpdateTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "periodFinish()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    poolCreator(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "poolCreator()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    proposalCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "proposalCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposalThresholdRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "proposalThresholdRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      target: string;
      proposer: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      quorumVotes: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      target: string;
      proposer: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      quorumVotes: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: boolean;
    }>;

    propose(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "propose(string[],bytes[],string)"(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposeToUpgradeAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeToUpgradeAndCall(bytes32,bytes,bytes,string)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    quorumRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "quorumRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rewardDistribution(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewardPerToken(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardPerToken()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rewardRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rewardRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rewardToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "rewardToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockDelay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "unlockDelay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    votingDelay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "votingDelay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    votingPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  SIGNATURE_PERPETUAL_SETTLE(overrides?: CallOverrides): Promise<string>;

  "SIGNATURE_PERPETUAL_SETTLE()"(overrides?: CallOverrides): Promise<string>;

  SIGNATURE_PERPETUAL_TRANSFER_OPERATOR(
    overrides?: CallOverrides
  ): Promise<string>;

  "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR()"(
    overrides?: CallOverrides
  ): Promise<string>;

  SIGNATURE_PERPETUAL_UPGRADE_AND_CALL(
    overrides?: CallOverrides
  ): Promise<string>;

  "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL()"(
    overrides?: CallOverrides
  ): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  criticalQuorumRate(overrides?: CallOverrides): Promise<BigNumber>;

  "criticalQuorumRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "executionDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: string[];
  }>;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: string[];
  }>;

  getMinter(overrides?: CallOverrides): Promise<string>;

  "getMinter()"(overrides?: CallOverrides): Promise<string>;

  getProposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "getProposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  getQuorumVotes(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getQuorumVotes(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReceipt(
    proposalId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  "getReceipt(uint256,address)"(
    proposalId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  getReward(overrides?: Overrides): Promise<ContractTransaction>;

  "getReward()"(overrides?: Overrides): Promise<ContractTransaction>;

  getTarget(overrides?: CallOverrides): Promise<string>;

  "getTarget()"(overrides?: CallOverrides): Promise<string>;

  getUnlockBlock(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUnlockBlock(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    name: string,
    symbol: string,
    minter: string,
    target: string,
    rewardToken: string,
    poolCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(string,string,address,address,address,address)"(
    name: string,
    symbol: string,
    minter: string,
    target: string,
    rewardToken: string,
    poolCreator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isCriticalFunction(
    functionSignature: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCriticalFunction(string)"(
    functionSignature: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLocked(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isLocked(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isLockedByVoting(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isLockedByVoting(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastBlockRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  "lastBlockRewardApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastMintBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastMintBlock(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "latestProposalIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    reward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyRewardAmount(uint256)"(
    reward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolCreator(overrides?: CallOverrides): Promise<string>;

  "poolCreator()"(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalThresholdRate(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalThresholdRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    target: string;
    proposer: string;
    startBlock: BigNumber;
    endBlock: BigNumber;
    quorumVotes: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: boolean;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    target: string;
    proposer: string;
    startBlock: BigNumber;
    endBlock: BigNumber;
    quorumVotes: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: boolean;
  }>;

  propose(
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "propose(string[],bytes[],string)"(
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposeToUpgradeAndCall(
    targetVersionKey: BytesLike,
    dataForLiquidityPool: BytesLike,
    dataForGovernor: BytesLike,
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeToUpgradeAndCall(bytes32,bytes,bytes,string)"(
    targetVersionKey: BytesLike,
    dataForLiquidityPool: BytesLike,
    dataForGovernor: BytesLike,
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  quorumRate(overrides?: CallOverrides): Promise<BigNumber>;

  "quorumRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardDistribution(overrides?: CallOverrides): Promise<string>;

  "rewardDistribution()"(overrides?: CallOverrides): Promise<string>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rewards(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRewardRate(
    newRewardRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardRate(uint256)"(
    newRewardRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "unlockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  userRewardPerTokenPaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userRewardPerTokenPaid(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    SIGNATURE_PERPETUAL_SETTLE(overrides?: CallOverrides): Promise<string>;

    "SIGNATURE_PERPETUAL_SETTLE()"(overrides?: CallOverrides): Promise<string>;

    SIGNATURE_PERPETUAL_TRANSFER_OPERATOR(
      overrides?: CallOverrides
    ): Promise<string>;

    "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<string>;

    SIGNATURE_PERPETUAL_UPGRADE_AND_CALL(
      overrides?: CallOverrides
    ): Promise<string>;

    "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL()"(
      overrides?: CallOverrides
    ): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    criticalQuorumRate(overrides?: CallOverrides): Promise<BigNumber>;

    "criticalQuorumRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "executionDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: string[];
    }>;

    getMinter(overrides?: CallOverrides): Promise<string>;

    "getMinter()"(overrides?: CallOverrides): Promise<string>;

    getProposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    getReward(overrides?: CallOverrides): Promise<void>;

    "getReward()"(overrides?: CallOverrides): Promise<void>;

    getTarget(overrides?: CallOverrides): Promise<string>;

    "getTarget()"(overrides?: CallOverrides): Promise<string>;

    getUnlockBlock(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnlockBlock(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,address,address,address,address)"(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLocked(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isLocked(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLockedByVoting(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLockedByVoting(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastBlockRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastBlockRewardApplicable()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastMintBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastMintBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolCreator(overrides?: CallOverrides): Promise<string>;

    "poolCreator()"(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThresholdRate(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalThresholdRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      target: string;
      proposer: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      quorumVotes: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      target: string;
      proposer: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      quorumVotes: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: boolean;
    }>;

    propose(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propose(string[],bytes[],string)"(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeToUpgradeAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposeToUpgradeAndCall(bytes32,bytes,bytes,string)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumRate(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistribution(overrides?: CallOverrides): Promise<string>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<string>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    ExecuteTransaction(
      txHash: BytesLike | null,
      target: string | null,
      signature: null,
      data: null,
      eta: null
    ): EventFilter;

    ProposalCreated(
      id: null,
      proposer: null,
      target: null,
      signatures: null,
      calldatas: null,
      startBlock: null,
      endBlock: null,
      quorumVotes: null,
      description: null
    ): EventFilter;

    ProposalExecuted(id: null): EventFilter;

    RewardAdded(reward: null, periodFinish: null): EventFilter;

    RewardPaid(user: string | null, reward: null): EventFilter;

    RewardRateChanged(
      previousRate: null,
      currentRate: null,
      periodFinish: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    VoteCast(
      account: null,
      proposalId: null,
      support: null,
      votes: null
    ): EventFilter;
  };

  estimateGas: {
    SIGNATURE_PERPETUAL_SETTLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SIGNATURE_PERPETUAL_SETTLE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SIGNATURE_PERPETUAL_TRANSFER_OPERATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SIGNATURE_PERPETUAL_UPGRADE_AND_CALL(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    criticalQuorumRate(overrides?: CallOverrides): Promise<BigNumber>;

    "criticalQuorumRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "executionDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinter(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinter()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(overrides?: Overrides): Promise<BigNumber>;

    "getReward()"(overrides?: Overrides): Promise<BigNumber>;

    getTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "getTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockBlock(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnlockBlock(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(string,string,address,address,address,address)"(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocked(account: string, overrides?: Overrides): Promise<BigNumber>;

    "isLocked(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isLockedByVoting(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "isLockedByVoting(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastBlockRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastBlockRewardApplicable()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastMintBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastMintBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolCreator(overrides?: CallOverrides): Promise<BigNumber>;

    "poolCreator()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThresholdRate(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalThresholdRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "propose(string[],bytes[],string)"(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposeToUpgradeAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeToUpgradeAndCall(bytes32,bytes,bytes,string)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    quorumRate(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SIGNATURE_PERPETUAL_SETTLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIGNATURE_PERPETUAL_SETTLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_PERPETUAL_TRANSFER_OPERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIGNATURE_PERPETUAL_TRANSFER_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_PERPETUAL_UPGRADE_AND_CALL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIGNATURE_PERPETUAL_UPGRADE_AND_CALL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    criticalQuorumRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "criticalQuorumRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    executionDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "executionDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMinter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposalThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(overrides?: Overrides): Promise<PopulatedTransaction>;

    "getReward()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTarget()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnlockBlock(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnlockBlock(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,address,address,address,address)"(
      name: string,
      symbol: string,
      minter: string,
      target: string,
      rewardToken: string,
      poolCreator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isLocked(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isLockedByVoting(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isLockedByVoting(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastBlockRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastBlockRewardApplicable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastMintBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastMintBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodFinish()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolCreator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalThresholdRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalThresholdRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "propose(string[],bytes[],string)"(
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposeToUpgradeAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeToUpgradeAndCall(bytes32,bytes,bytes,string)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    quorumRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quorumRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardDistribution()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPerToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unlockDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
