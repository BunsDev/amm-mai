/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    "addAMMKeeper(uint256,address)": FunctionFragment;
    "addLiquidity(int256)": FunctionFragment;
    "brokerTrade(bytes,int256)": FunctionFragment;
    "checkIn()": FunctionFragment;
    "claimOperator()": FunctionFragment;
    "clear(uint256)": FunctionFragment;
    "createPerpetual(address,int256[9],int256[9],int256[9],int256[9])": FunctionFragment;
    "deposit(uint256,address,int256)": FunctionFragment;
    "donateInsuranceFund(int256)": FunctionFragment;
    "donateLiquidity(int256)": FunctionFragment;
    "forceToSetEmergencyState(uint256,int256)": FunctionFragment;
    "forceToSyncState()": FunctionFragment;
    "getActiveAccountCount(uint256)": FunctionFragment;
    "getClearProgress(uint256)": FunctionFragment;
    "getLiquidityPoolInfo()": FunctionFragment;
    "getMarginAccount(uint256,address)": FunctionFragment;
    "getPerpetualInfo(uint256)": FunctionFragment;
    "getPoolMargin()": FunctionFragment;
    "initialize(address,address,uint256,address,bytes)": FunctionFragment;
    "liquidateByAMM(uint256,address)": FunctionFragment;
    "liquidateByTrader(uint256,address,address,int256,int256,uint256)": FunctionFragment;
    "listActiveAccounts(uint256,uint256,uint256)": FunctionFragment;
    "listByAMMKeepers(uint256,uint256,uint256)": FunctionFragment;
    "queryAddLiquidity(int256,int256)": FunctionFragment;
    "queryRemoveLiquidity(int256,int256)": FunctionFragment;
    "queryTrade(uint256,address,int256,address,uint32)": FunctionFragment;
    "removeAMMKeeper(uint256,address)": FunctionFragment;
    "removeLiquidity(int256,int256)": FunctionFragment;
    "revokeOperator()": FunctionFragment;
    "runLiquidityPool()": FunctionFragment;
    "setEmergencyState(uint256)": FunctionFragment;
    "setLiquidityPoolParameter(int256[4])": FunctionFragment;
    "setOracle(uint256,address)": FunctionFragment;
    "setPerpetualBaseParameter(uint256,int256[9])": FunctionFragment;
    "setPerpetualRiskParameter(uint256,int256[9],int256[9],int256[9])": FunctionFragment;
    "setTargetLeverage(uint256,address,int256)": FunctionFragment;
    "settle(uint256,address)": FunctionFragment;
    "trade(uint256,address,int256,int256,uint256,address,uint32)": FunctionFragment;
    "transferOperator(address)": FunctionFragment;
    "updatePerpetualRiskParameter(uint256,int256[9])": FunctionFragment;
    "withdraw(uint256,address,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAMMKeeper",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerTrade",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "checkIn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimOperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clear", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createPerpetual",
    values: [
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateInsuranceFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceToSetEmergencyState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceToSyncState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAccountCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearProgress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetualInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByAMM",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByTrader",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listActiveAccounts",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listByAMMKeepers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryAddLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryRemoveLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryTrade",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAMMKeeper",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runLiquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPoolParameter",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualBaseParameter",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualRiskParameter",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetLeverage",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerpetualRiskParameter",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAMMKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceToSetEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceToSyncState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAccountCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetualInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listActiveAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listByAMMKeepers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAMMKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPoolParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualBaseParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerpetualRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddAMMKeeper(uint256,address)": EventFragment;
    "AddLiquidity(address,int256,int256,int256)": EventFragment;
    "AddTraderKeeper(uint256,address)": EventFragment;
    "ClaimOperator(address)": EventFragment;
    "Clear(uint256,address)": EventFragment;
    "CreatePerpetual(uint256,address,address,address,address,address,int256[9],int256[9])": EventFragment;
    "Deposit(uint256,address,int256)": EventFragment;
    "DonateInsuranceFund(int256)": EventFragment;
    "Liquidate(uint256,address,address,int256,int256,int256,int256)": EventFragment;
    "OperatorCheckIn(address)": EventFragment;
    "RemoveAMMKeeper(uint256,address)": EventFragment;
    "RemoveLiquidity(address,int256,int256,int256)": EventFragment;
    "RemoveTraderKeeper(uint256,address)": EventFragment;
    "RevokeOperator()": EventFragment;
    "RunLiquidityPool()": EventFragment;
    "SetClearedState(uint256)": EventFragment;
    "SetEmergencyState(uint256,int256,uint256)": EventFragment;
    "SetLiquidityPoolParameter(int256[4])": EventFragment;
    "SetNormalState(uint256)": EventFragment;
    "SetOracle(uint256,address,address)": EventFragment;
    "SetPerpetualBaseParameter(uint256,int256[9])": EventFragment;
    "SetPerpetualRiskParameter(uint256,int256[9],int256[9],int256[9])": EventFragment;
    "SetTargetLeverage(uint256,address,int256)": EventFragment;
    "Settle(uint256,address,int256)": EventFragment;
    "Trade(uint256,address,int256,int256,int256,int256)": EventFragment;
    "TransferExcessInsuranceFundToLP(int256)": EventFragment;
    "TransferFeeToOperator(uint256,address,address,int256)": EventFragment;
    "TransferFeeToReferrer(uint256,address,address,int256)": EventFragment;
    "TransferFeeToVault(uint256,address,address,int256)": EventFragment;
    "TransferOperatorTo(address)": EventFragment;
    "UpdateFundingRate(uint256,int256)": EventFragment;
    "UpdatePerpetualRiskParameter(uint256,int256[9])": EventFragment;
    "UpdatePoolMargin(int256)": EventFragment;
    "UpdatePrice(uint256,address,int256,uint256,int256,uint256)": EventFragment;
    "UpdateUnitAccumulativeFunding(uint256,int256)": EventFragment;
    "Withdraw(uint256,address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAMMKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddTraderKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Clear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePerpetual"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonateInsuranceFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorCheckIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAMMKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveTraderKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RunLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClearedState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmergencyState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidityPoolParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNormalState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPerpetualBaseParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPerpetualRiskParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTargetLeverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferExcessInsuranceFundToLP"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFeeToOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFeeToReferrer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFeeToVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOperatorTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFundingRate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePerpetualRiskParameter"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePoolMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePrice"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateUnitAccumulativeFunding"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class LiquidityPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityPoolInterface;

  functions: {
    addAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    brokerTrade(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "brokerTrade(bytes,int256)"(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkIn(overrides?: Overrides): Promise<ContractTransaction>;

    "checkIn()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimOperator(overrides?: Overrides): Promise<ContractTransaction>;

    "claimOperator()"(overrides?: Overrides): Promise<ContractTransaction>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPerpetual(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPerpetual(address,int256[9],int256[9],int256[9],int256[9])"(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    donateLiquidity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "donateLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceToSetEmergencyState(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceToSetEmergencyState(uint256,int256)"(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceToSyncState(overrides?: Overrides): Promise<ContractTransaction>;

    "forceToSyncState()"(overrides?: Overrides): Promise<ContractTransaction>;

    getActiveAccountCount(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      activeAccountCount: BigNumber;
      0: BigNumber;
    }>;

    "getActiveAccountCount(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      activeAccountCount: BigNumber;
      0: BigNumber;
    }>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidityPoolInfo(overrides?: CallOverrides): Promise<{
      isRunning: boolean;
      isFastCreationEnabled: boolean;
      addresses: [string, string, string, string, string, string, string];
      intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      uintNums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: boolean;
      1: boolean;
      2: [string, string, string, string, string, string, string];
      3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      4: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "getLiquidityPoolInfo()"(overrides?: CallOverrides): Promise<{
      isRunning: boolean;
      isFastCreationEnabled: boolean;
      addresses: [string, string, string, string, string, string, string];
      intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      uintNums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: boolean;
      1: boolean;
      2: [string, string, string, string, string, string, string];
      3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      4: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      availableMargin: BigNumber;
      margin: BigNumber;
      settleableMargin: BigNumber;
      isInitialMarginSafe: boolean;
      isMaintenanceMarginSafe: boolean;
      isMarginSafe: boolean;
      targetLeverage: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: boolean;
      7: boolean;
      8: BigNumber;
    }>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      availableMargin: BigNumber;
      margin: BigNumber;
      settleableMargin: BigNumber;
      isInitialMarginSafe: boolean;
      isMaintenanceMarginSafe: boolean;
      isMarginSafe: boolean;
      targetLeverage: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: boolean;
      7: boolean;
      8: BigNumber;
    }>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    getPoolMargin(overrides?: CallOverrides): Promise<{
      poolMargin: BigNumber;
      isAMMSafe: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    "getPoolMargin()"(overrides?: CallOverrides): Promise<{
      poolMargin: BigNumber;
      isAMMSafe: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    initialize(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,address,bytes)"(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByAMM(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByTrader(uint256,address,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    listActiveAccounts(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listActiveAccounts(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    listByAMMKeepers(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listByAMMKeepers(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    queryAddLiquidity(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cashToAddResult: BigNumber;
      shareToMintResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "queryAddLiquidity(int256,int256)"(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cashToAddResult: BigNumber;
      shareToMintResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    queryRemoveLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      shareToRemoveResult: BigNumber;
      cashToReturnResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "queryRemoveLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      shareToRemoveResult: BigNumber;
      cashToReturnResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    queryTrade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queryTrade(uint256,address,int256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeOperator(overrides?: Overrides): Promise<ContractTransaction>;

    "revokeOperator()"(overrides?: Overrides): Promise<ContractTransaction>;

    runLiquidityPool(overrides?: Overrides): Promise<ContractTransaction>;

    "runLiquidityPool()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidityPoolParameter(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidityPoolParameter(int256[4])"(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracle(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracle(uint256,address)"(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPerpetualBaseParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPerpetualRiskParameter(uint256,int256[9],int256[9],int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTargetLeverage(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTargetLeverage(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trade(uint256,address,int256,int256,uint256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePerpetualRiskParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addAMMKeeper(
    perpetualIndex: BigNumberish,
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAMMKeeper(uint256,address)"(
    perpetualIndex: BigNumberish,
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    cashToAdd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(int256)"(
    cashToAdd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  brokerTrade(
    orderData: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "brokerTrade(bytes,int256)"(
    orderData: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkIn(overrides?: Overrides): Promise<ContractTransaction>;

  "checkIn()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimOperator(overrides?: Overrides): Promise<ContractTransaction>;

  "claimOperator()"(overrides?: Overrides): Promise<ContractTransaction>;

  clear(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "clear(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPerpetual(
    oracle: string,
    baseParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPerpetual(address,int256[9],int256[9],int256[9],int256[9])"(
    oracle: string,
    baseParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address,int256)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  donateInsuranceFund(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "donateInsuranceFund(int256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  donateLiquidity(
    cashToAdd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "donateLiquidity(int256)"(
    cashToAdd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceToSetEmergencyState(
    perpetualIndex: BigNumberish,
    settlementPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceToSetEmergencyState(uint256,int256)"(
    perpetualIndex: BigNumberish,
    settlementPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceToSyncState(overrides?: Overrides): Promise<ContractTransaction>;

  "forceToSyncState()"(overrides?: Overrides): Promise<ContractTransaction>;

  getActiveAccountCount(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getActiveAccountCount(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearProgress(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    left: BigNumber;
    total: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getClearProgress(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    left: BigNumber;
    total: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getLiquidityPoolInfo(overrides?: CallOverrides): Promise<{
    isRunning: boolean;
    isFastCreationEnabled: boolean;
    addresses: [string, string, string, string, string, string, string];
    intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    uintNums: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    0: boolean;
    1: boolean;
    2: [string, string, string, string, string, string, string];
    3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    4: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  }>;

  "getLiquidityPoolInfo()"(overrides?: CallOverrides): Promise<{
    isRunning: boolean;
    isFastCreationEnabled: boolean;
    addresses: [string, string, string, string, string, string, string];
    intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    uintNums: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    0: boolean;
    1: boolean;
    2: [string, string, string, string, string, string, string];
    3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    4: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  }>;

  getMarginAccount(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    cash: BigNumber;
    position: BigNumber;
    availableMargin: BigNumber;
    margin: BigNumber;
    settleableMargin: BigNumber;
    isInitialMarginSafe: boolean;
    isMaintenanceMarginSafe: boolean;
    isMarginSafe: boolean;
    targetLeverage: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: boolean;
    7: boolean;
    8: BigNumber;
  }>;

  "getMarginAccount(uint256,address)"(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    cash: BigNumber;
    position: BigNumber;
    availableMargin: BigNumber;
    margin: BigNumber;
    settleableMargin: BigNumber;
    isInitialMarginSafe: boolean;
    isMaintenanceMarginSafe: boolean;
    isMarginSafe: boolean;
    targetLeverage: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: boolean;
    7: boolean;
    8: BigNumber;
  }>;

  getPerpetualInfo(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    oracle: string;
    nums: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    0: number;
    1: string;
    2: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
  }>;

  "getPerpetualInfo(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    state: number;
    oracle: string;
    nums: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    0: number;
    1: string;
    2: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
  }>;

  getPoolMargin(overrides?: CallOverrides): Promise<{
    poolMargin: BigNumber;
    isAMMSafe: boolean;
    0: BigNumber;
    1: boolean;
  }>;

  "getPoolMargin()"(overrides?: CallOverrides): Promise<{
    poolMargin: BigNumber;
    isAMMSafe: boolean;
    0: BigNumber;
    1: boolean;
  }>;

  initialize(
    operator: string,
    collateral: string,
    collateralDecimals: BigNumberish,
    governor: string,
    initData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,address,bytes)"(
    operator: string,
    collateral: string,
    collateralDecimals: BigNumberish,
    governor: string,
    initData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateByAMM(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByAMM(uint256,address)"(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateByTrader(
    perpetualIndex: BigNumberish,
    liquidator: string,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByTrader(uint256,address,address,int256,int256,uint256)"(
    perpetualIndex: BigNumberish,
    liquidator: string,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  listActiveAccounts(
    perpetualIndex: BigNumberish,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listActiveAccounts(uint256,uint256,uint256)"(
    perpetualIndex: BigNumberish,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listByAMMKeepers(
    perpetualIndex: BigNumberish,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listByAMMKeepers(uint256,uint256,uint256)"(
    perpetualIndex: BigNumberish,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  queryAddLiquidity(
    cashToAdd: BigNumberish,
    shareToMint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    cashToAddResult: BigNumber;
    shareToMintResult: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "queryAddLiquidity(int256,int256)"(
    cashToAdd: BigNumberish,
    shareToMint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    cashToAddResult: BigNumber;
    shareToMintResult: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  queryRemoveLiquidity(
    shareToRemove: BigNumberish,
    cashToReturn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    shareToRemoveResult: BigNumber;
    cashToReturnResult: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "queryRemoveLiquidity(int256,int256)"(
    shareToRemove: BigNumberish,
    cashToReturn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    shareToRemoveResult: BigNumber;
    cashToReturnResult: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  queryTrade(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    referrer: string,
    flags: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queryTrade(uint256,address,int256,address,uint32)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    referrer: string,
    flags: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeAMMKeeper(
    perpetualIndex: BigNumberish,
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAMMKeeper(uint256,address)"(
    perpetualIndex: BigNumberish,
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidity(
    shareToRemove: BigNumberish,
    cashToReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(int256,int256)"(
    shareToRemove: BigNumberish,
    cashToReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeOperator(overrides?: Overrides): Promise<ContractTransaction>;

  "revokeOperator()"(overrides?: Overrides): Promise<ContractTransaction>;

  runLiquidityPool(overrides?: Overrides): Promise<ContractTransaction>;

  "runLiquidityPool()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEmergencyState(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmergencyState(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidityPoolParameter(
    params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidityPoolParameter(int256[4])"(
    params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracle(
    perpetualIndex: BigNumberish,
    oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracle(uint256,address)"(
    perpetualIndex: BigNumberish,
    oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPerpetualBaseParameter(
    perpetualIndex: BigNumberish,
    baseParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPerpetualBaseParameter(uint256,int256[9])"(
    perpetualIndex: BigNumberish,
    baseParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPerpetualRiskParameter(
    perpetualIndex: BigNumberish,
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPerpetualRiskParameter(uint256,int256[9],int256[9],int256[9])"(
    perpetualIndex: BigNumberish,
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTargetLeverage(
    perpetualIndex: BigNumberish,
    trader: string,
    targetLeverage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTargetLeverage(uint256,address,int256)"(
    perpetualIndex: BigNumberish,
    trader: string,
    targetLeverage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settle(uint256,address)"(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trade(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    flags: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trade(uint256,address,int256,int256,uint256,address,uint32)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    flags: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOperator(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOperator(address)"(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePerpetualRiskParameter(
    perpetualIndex: BigNumberish,
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePerpetualRiskParameter(uint256,int256[9])"(
    perpetualIndex: BigNumberish,
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,int256)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    brokerTrade(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "brokerTrade(bytes,int256)"(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIn(overrides?: CallOverrides): Promise<void>;

    "checkIn()"(overrides?: CallOverrides): Promise<void>;

    claimOperator(overrides?: CallOverrides): Promise<void>;

    "claimOperator()"(overrides?: CallOverrides): Promise<void>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPerpetual(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "createPerpetual(address,int256[9],int256[9],int256[9],int256[9])"(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donateLiquidity(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "donateLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceToSetEmergencyState(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceToSetEmergencyState(uint256,int256)"(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceToSyncState(overrides?: CallOverrides): Promise<void>;

    "forceToSyncState()"(overrides?: CallOverrides): Promise<void>;

    getActiveAccountCount(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActiveAccountCount(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidityPoolInfo(overrides?: CallOverrides): Promise<{
      isRunning: boolean;
      isFastCreationEnabled: boolean;
      addresses: [string, string, string, string, string, string, string];
      intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      uintNums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: boolean;
      1: boolean;
      2: [string, string, string, string, string, string, string];
      3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      4: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "getLiquidityPoolInfo()"(overrides?: CallOverrides): Promise<{
      isRunning: boolean;
      isFastCreationEnabled: boolean;
      addresses: [string, string, string, string, string, string, string];
      intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      uintNums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: boolean;
      1: boolean;
      2: [string, string, string, string, string, string, string];
      3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      4: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      availableMargin: BigNumber;
      margin: BigNumber;
      settleableMargin: BigNumber;
      isInitialMarginSafe: boolean;
      isMaintenanceMarginSafe: boolean;
      isMarginSafe: boolean;
      targetLeverage: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: boolean;
      7: boolean;
      8: BigNumber;
    }>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      availableMargin: BigNumber;
      margin: BigNumber;
      settleableMargin: BigNumber;
      isInitialMarginSafe: boolean;
      isMaintenanceMarginSafe: boolean;
      isMarginSafe: boolean;
      targetLeverage: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: boolean;
      7: boolean;
      8: BigNumber;
    }>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    getPoolMargin(overrides?: CallOverrides): Promise<{
      poolMargin: BigNumber;
      isAMMSafe: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    "getPoolMargin()"(overrides?: CallOverrides): Promise<{
      poolMargin: BigNumber;
      isAMMSafe: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    initialize(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,address,bytes)"(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidateByAMM(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidateByTrader(uint256,address,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listActiveAccounts(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listActiveAccounts(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listByAMMKeepers(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listByAMMKeepers(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    queryAddLiquidity(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cashToAddResult: BigNumber;
      shareToMintResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "queryAddLiquidity(int256,int256)"(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      cashToAddResult: BigNumber;
      shareToMintResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    queryRemoveLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      shareToRemoveResult: BigNumber;
      cashToReturnResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "queryRemoveLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      shareToRemoveResult: BigNumber;
      cashToReturnResult: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    queryTrade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tradePrice: BigNumber;
      totalFee: BigNumber;
      cost: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "queryTrade(uint256,address,int256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tradePrice: BigNumber;
      totalFee: BigNumber;
      cost: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    removeAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperator(overrides?: CallOverrides): Promise<void>;

    "revokeOperator()"(overrides?: CallOverrides): Promise<void>;

    runLiquidityPool(overrides?: CallOverrides): Promise<void>;

    "runLiquidityPool()"(overrides?: CallOverrides): Promise<void>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPoolParameter(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidityPoolParameter(int256[4])"(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracle(uint256,address)"(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerpetualBaseParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerpetualRiskParameter(uint256,int256[9],int256[9],int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetLeverage(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTargetLeverage(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "trade(uint256,address,int256,int256,uint256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOperator(
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOperator(address)"(
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePerpetualRiskParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddAMMKeeper(perpetualIndex: null, keeper: string | null): EventFilter;

    AddLiquidity(
      trader: string | null,
      addedCash: null,
      mintedShare: null,
      addedPoolMargin: null
    ): EventFilter;

    AddTraderKeeper(perpetualIndex: null, keeper: string | null): EventFilter;

    ClaimOperator(newOperator: string | null): EventFilter;

    Clear(perpetualIndex: null, trader: string | null): EventFilter;

    CreatePerpetual(
      perpetualIndex: null,
      governor: null,
      shareToken: null,
      operator: null,
      oracle: null,
      collateral: null,
      baseParams: null,
      riskParams: null
    ): EventFilter;

    Deposit(
      perpetualIndex: null,
      trader: string | null,
      amount: null
    ): EventFilter;

    DonateInsuranceFund(amount: null): EventFilter;

    Liquidate(
      perpetualIndex: null,
      liquidator: string | null,
      trader: string | null,
      amount: null,
      price: null,
      penalty: null,
      penaltyToLP: null
    ): EventFilter;

    OperatorCheckIn(operator: string | null): EventFilter;

    RemoveAMMKeeper(perpetualIndex: null, keeper: string | null): EventFilter;

    RemoveLiquidity(
      trader: string | null,
      returnedCash: null,
      burnedShare: null,
      removedPoolMargin: null
    ): EventFilter;

    RemoveTraderKeeper(
      perpetualIndex: null,
      keeper: string | null
    ): EventFilter;

    RevokeOperator(): EventFilter;

    RunLiquidityPool(): EventFilter;

    SetClearedState(perpetualIndex: null): EventFilter;

    SetEmergencyState(
      perpetualIndex: null,
      settlementPrice: null,
      settlementTime: null
    ): EventFilter;

    SetLiquidityPoolParameter(value: null): EventFilter;

    SetNormalState(perpetualIndex: null): EventFilter;

    SetOracle(
      perpetualIndex: null,
      oldOracle: string | null,
      newOracle: string | null
    ): EventFilter;

    SetPerpetualBaseParameter(
      perpetualIndex: null,
      baseParams: null
    ): EventFilter;

    SetPerpetualRiskParameter(
      perpetualIndex: null,
      riskParams: null,
      minRiskParamValues: null,
      maxRiskParamValues: null
    ): EventFilter;

    SetTargetLeverage(
      perpetualIndex: null,
      trader: string | null,
      targetLeverage: null
    ): EventFilter;

    Settle(
      perpetualIndex: null,
      trader: string | null,
      amount: null
    ): EventFilter;

    Trade(
      perpetualIndex: null,
      trader: string | null,
      position: null,
      price: null,
      fee: null,
      lpFee: null
    ): EventFilter;

    TransferExcessInsuranceFundToLP(amount: null): EventFilter;

    TransferFeeToOperator(
      perpetualIndex: null,
      trader: string | null,
      operator: string | null,
      operatorFee: null
    ): EventFilter;

    TransferFeeToReferrer(
      perpetualIndex: null,
      trader: string | null,
      referrer: string | null,
      referralRebate: null
    ): EventFilter;

    TransferFeeToVault(
      perpetualIndex: null,
      trader: string | null,
      vault: string | null,
      vaultFee: null
    ): EventFilter;

    TransferOperatorTo(newOperator: string | null): EventFilter;

    UpdateFundingRate(perpetualIndex: null, fundingRate: null): EventFilter;

    UpdatePerpetualRiskParameter(
      perpetualIndex: null,
      riskParams: null
    ): EventFilter;

    UpdatePoolMargin(poolMargin: null): EventFilter;

    UpdatePrice(
      perpetualIndex: null,
      oracle: string | null,
      markPrice: null,
      markPriceUpdateTime: null,
      indexPrice: null,
      indexPriceUpdateTime: null
    ): EventFilter;

    UpdateUnitAccumulativeFunding(
      perpetualIndex: null,
      unitAccumulativeFunding: null
    ): EventFilter;

    Withdraw(
      perpetualIndex: null,
      trader: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    addAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    brokerTrade(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "brokerTrade(bytes,int256)"(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkIn(overrides?: Overrides): Promise<BigNumber>;

    "checkIn()"(overrides?: Overrides): Promise<BigNumber>;

    claimOperator(overrides?: Overrides): Promise<BigNumber>;

    "claimOperator()"(overrides?: Overrides): Promise<BigNumber>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPerpetual(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPerpetual(address,int256[9],int256[9],int256[9],int256[9])"(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    donateLiquidity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "donateLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceToSetEmergencyState(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forceToSetEmergencyState(uint256,int256)"(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceToSyncState(overrides?: Overrides): Promise<BigNumber>;

    "forceToSyncState()"(overrides?: Overrides): Promise<BigNumber>;

    getActiveAccountCount(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActiveAccountCount(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolMargin(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,address,bytes)"(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByAMM(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByTrader(uint256,address,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    listActiveAccounts(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listActiveAccounts(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listByAMMKeepers(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listByAMMKeepers(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryAddLiquidity(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryAddLiquidity(int256,int256)"(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryRemoveLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryRemoveLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryTrade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queryTrade(uint256,address,int256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeOperator(overrides?: Overrides): Promise<BigNumber>;

    "revokeOperator()"(overrides?: Overrides): Promise<BigNumber>;

    runLiquidityPool(overrides?: Overrides): Promise<BigNumber>;

    "runLiquidityPool()"(overrides?: Overrides): Promise<BigNumber>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidityPoolParameter(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidityPoolParameter(int256[4])"(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracle(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOracle(uint256,address)"(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPerpetualBaseParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPerpetualRiskParameter(uint256,int256[9],int256[9],int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTargetLeverage(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTargetLeverage(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trade(uint256,address,int256,int256,uint256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePerpetualRiskParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    brokerTrade(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "brokerTrade(bytes,int256)"(
      orderData: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkIn(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkIn()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimOperator(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimOperator()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPerpetual(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPerpetual(address,int256[9],int256[9],int256[9],int256[9])"(
      oracle: string,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    donateLiquidity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "donateLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceToSetEmergencyState(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceToSetEmergencyState(uint256,int256)"(
      perpetualIndex: BigNumberish,
      settlementPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceToSyncState(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forceToSyncState()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getActiveAccountCount(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActiveAccountCount(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPoolInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPoolInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolMargin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,address,bytes)"(
      operator: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      governor: string,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByAMM(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByTrader(uint256,address,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      liquidator: string,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    listActiveAccounts(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listActiveAccounts(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listByAMMKeepers(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listByAMMKeepers(uint256,uint256,uint256)"(
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryAddLiquidity(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryAddLiquidity(int256,int256)"(
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryRemoveLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryRemoveLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryTrade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queryTrade(uint256,address,int256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAMMKeeper(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAMMKeeper(uint256,address)"(
      perpetualIndex: BigNumberish,
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(int256,int256)"(
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeOperator(overrides?: Overrides): Promise<PopulatedTransaction>;

    "revokeOperator()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    runLiquidityPool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "runLiquidityPool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidityPoolParameter(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidityPoolParameter(int256[4])"(
      params: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracle(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracle(uint256,address)"(
      perpetualIndex: BigNumberish,
      oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPerpetualBaseParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      baseParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPerpetualRiskParameter(uint256,int256[9],int256[9],int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTargetLeverage(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTargetLeverage(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      targetLeverage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trade(uint256,address,int256,int256,uint256,address,uint32)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePerpetualRiskParameter(uint256,int256[9])"(
      perpetualIndex: BigNumberish,
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
