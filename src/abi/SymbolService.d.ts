/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SymbolServiceInterface extends ethers.utils.Interface {
  functions: {
    "addWhitelistedFactory(address)": FunctionFragment;
    "allocateSymbol(address,uint256)": FunctionFragment;
    "assignReservedSymbol(address,uint256,uint256)": FunctionFragment;
    "getPerpetualUID(uint256)": FunctionFragment;
    "getSymbols(address,uint256)": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "isWhitelistedFactory(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeWhitelistedFactory(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addWhitelistedFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allocateSymbol",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignReservedSymbol",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetualUID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbols",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedFactory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelistedFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignReservedSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetualUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSymbols", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddWhitelistedFactory(address)": EventFragment;
    "AllocateSymbol(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveWhitelistedFactory(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddWhitelistedFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocateSymbol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveWhitelistedFactory"): EventFragment;
}

export class SymbolService extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SymbolServiceInterface;

  functions: {
    addWhitelistedFactory(
      factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addWhitelistedFactory(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocateSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allocateSymbol(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    assignReservedSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "assignReservedSymbol(address,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPerpetualUID(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "getPerpetualUID(uint256)"(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    getSymbols(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      symbols: BigNumber[];
      0: BigNumber[];
    }>;

    "getSymbols(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      symbols: BigNumber[];
      0: BigNumber[];
    }>;

    initialize(
      reservedSymbolCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256)"(
      reservedSymbolCount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isWhitelistedFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isWhitelistedFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    removeWhitelistedFactory(
      factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeWhitelistedFactory(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addWhitelistedFactory(
    factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addWhitelistedFactory(address)"(
    factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocateSymbol(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allocateSymbol(address,uint256)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  assignReservedSymbol(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    symbol: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "assignReservedSymbol(address,uint256,uint256)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    symbol: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPerpetualUID(
    symbol: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidityPool: string;
    perpetualIndex: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "getPerpetualUID(uint256)"(
    symbol: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    liquidityPool: string;
    perpetualIndex: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  getSymbols(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getSymbols(address,uint256)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initialize(
    reservedSymbolCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256)"(
    reservedSymbolCount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isWhitelistedFactory(
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelistedFactory(address)"(
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeWhitelistedFactory(
    factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeWhitelistedFactory(address)"(
    factory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhitelistedFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addWhitelistedFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allocateSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allocateSymbol(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignReservedSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assignReservedSymbol(address,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPerpetualUID(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "getPerpetualUID(uint256)"(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    getSymbols(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getSymbols(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initialize(
      reservedSymbolCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256)"(
      reservedSymbolCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelistedFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelistedFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeWhitelistedFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWhitelistedFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddWhitelistedFactory(factory: null): EventFilter;

    AllocateSymbol(
      liquidityPool: null,
      perpetualIndex: null,
      symbol: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RemoveWhitelistedFactory(factory: null): EventFilter;
  };

  estimateGas: {
    addWhitelistedFactory(
      factory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addWhitelistedFactory(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocateSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "allocateSymbol(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    assignReservedSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "assignReservedSymbol(address,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPerpetualUID(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPerpetualUID(uint256)"(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSymbols(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSymbols(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      reservedSymbolCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256)"(
      reservedSymbolCount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isWhitelistedFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelistedFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelistedFactory(
      factory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeWhitelistedFactory(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelistedFactory(
      factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addWhitelistedFactory(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocateSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allocateSymbol(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    assignReservedSymbol(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "assignReservedSymbol(address,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      symbol: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPerpetualUID(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPerpetualUID(uint256)"(
      symbol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSymbols(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSymbols(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      reservedSymbolCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256)"(
      reservedSymbolCount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelistedFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelistedFactory(
      factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeWhitelistedFactory(address)"(
      factory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
