/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface InverseStateServiceInterface extends ethers.utils.Interface {
  functions: {
    "export(uint256,uint256)": FunctionFragment;
    "isInverse(address,uint256)": FunctionFragment;
    "setInverseState(address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "export",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInverse",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInverseState",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "export", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInverse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInverseState",
    data: BytesLike
  ): Result;

  events: {
    "SetInverseState(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetInverseState"): EventFragment;
}

export class InverseStateService extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: InverseStateServiceInterface;

  functions: {
    export(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "export(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    isInverse(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isInverse(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    setInverseState(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInverseState(address,uint256,bool)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  export(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "export(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isInverse(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isInverse(address,uint256)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setInverseState(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    isInverse_: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInverseState(address,uint256,bool)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    isInverse_: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    export(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "export(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isInverse(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isInverse(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setInverseState(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInverseState(address,uint256,bool)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetInverseState(
      liquidityPool: string | null,
      perpetualIndex: null,
      isInverse: null
    ): EventFilter;
  };

  estimateGas: {
    export(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "export(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInverse(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInverse(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInverseState(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInverseState(address,uint256,bool)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    export(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "export(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInverse(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInverse(address,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInverseState(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInverseState(address,uint256,bool)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      isInverse_: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
