/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolCreatorInterface extends ethers.utils.Interface {
  functions: {
    "activatePerpetualFor(address,uint256)": FunctionFragment;
    "addGuardian(address)": FunctionFragment;
    "addKeeper(address)": FunctionFragment;
    "addVersion(address,address,uint256,string)": FunctionFragment;
    "createLiquidityPool(address,uint256,int256,bytes)": FunctionFragment;
    "deactivatePerpetualFor(address,uint256)": FunctionFragment;
    "getAccessController()": FunctionFragment;
    "getActiveLiquidityPoolCountOf(address)": FunctionFragment;
    "getAppliedVersionKey(address,address)": FunctionFragment;
    "getKeeperCount()": FunctionFragment;
    "getLatestVersion()": FunctionFragment;
    "getLiquidityPoolCount()": FunctionFragment;
    "getMCBToken()": FunctionFragment;
    "getOwnedLiquidityPoolsCountOf(address)": FunctionFragment;
    "getSymbolService()": FunctionFragment;
    "getVault()": FunctionFragment;
    "getVaultFeeRate()": FunctionFragment;
    "getVersion(bytes32)": FunctionFragment;
    "grantPrivilege(address,uint256)": FunctionFragment;
    "guardianCount()": FunctionFragment;
    "guardians(address)": FunctionFragment;
    "initialize(address,address,int256)": FunctionFragment;
    "isActiveLiquidityPoolOf(address,address,uint256)": FunctionFragment;
    "isGranted(address,address,uint256)": FunctionFragment;
    "isGuardian(address)": FunctionFragment;
    "isKeeper(address)": FunctionFragment;
    "isLiquidityPool(address)": FunctionFragment;
    "isUniverseSettled()": FunctionFragment;
    "isVersionCompatible(bytes32,bytes32)": FunctionFragment;
    "isVersionKeyValid(bytes32)": FunctionFragment;
    "listActiveLiquidityPoolsOf(address,uint256,uint256)": FunctionFragment;
    "listAvailableVersions(uint256,uint256)": FunctionFragment;
    "listKeepers(uint256,uint256)": FunctionFragment;
    "listLiquidityPoolOwnedBy(address,uint256,uint256)": FunctionFragment;
    "listLiquidityPools(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolVersion()": FunctionFragment;
    "registerOperatorOfLiquidityPool(address,address)": FunctionFragment;
    "removeKeeper(address)": FunctionFragment;
    "renounceGuardian()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokePrivilege(address,uint256)": FunctionFragment;
    "setUniverseSettled()": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "setVaultFeeRate(int256)": FunctionFragment;
    "transferGuardian(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeAdmin()": FunctionFragment;
    "upgradeToAndCall(bytes32,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activatePerpetualFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addGuardian", values: [string]): string;
  encodeFunctionData(functionFragment: "addKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addVersion",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidityPool",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePerpetualFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveLiquidityPoolCountOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppliedVersionKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeeperCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPoolCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMCBToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnedLiquidityPoolsCountOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbolService",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPrivilege",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "guardianCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardians", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveLiquidityPoolOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isGuardian", values: [string]): string;
  encodeFunctionData(functionFragment: "isKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUniverseSettled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVersionCompatible",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVersionKeyValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listActiveLiquidityPoolsOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listAvailableVersions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listKeepers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listLiquidityPoolOwnedBy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listLiquidityPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperatorOfLiquidityPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokePrivilege",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniverseSettled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVaultFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePerpetualFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePerpetualFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveLiquidityPoolCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppliedVersionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeeperCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPoolCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMCBToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedLiquidityPoolsCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSymbolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantPrivilege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardians", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActiveLiquidityPoolOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUniverseSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVersionCompatible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVersionKeyValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listActiveLiquidityPoolsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listAvailableVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listKeepers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listLiquidityPoolOwnedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listLiquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorOfLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePrivilege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniverseSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AddGuardian(address)": EventFragment;
    "AddKeeperToWhitelist(address)": EventFragment;
    "AddVersion(bytes32,address,address,address,uint256,string)": EventFragment;
    "CreateLiquidityPool(bytes32,address,address,address,address,address,uint256,bytes)": EventFragment;
    "GrantPrivilege(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveKeeperFromWhitelist(address)": EventFragment;
    "RenounceGuardian(address)": EventFragment;
    "RevokePrivilege(address,address,uint256)": EventFragment;
    "SetKeeper(address,address)": EventFragment;
    "SetRewardDistributor(address,address)": EventFragment;
    "SetUniverseSettled()": EventFragment;
    "SetVault(address,address)": EventFragment;
    "SetVaultFeeRate(int256,int256)": EventFragment;
    "TransferGuardian(address,address)": EventFragment;
    "UpgradeLiquidityPool(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddKeeperToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantPrivilege"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveKeeperFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenounceGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokePrivilege"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUniverseSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVaultFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeLiquidityPool"): EventFragment;
}

export class PoolCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolCreatorInterface;

  functions: {
    activatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addGuardian(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addGuardian(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addKeeper(
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addVersion(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addVersion(address,address,uint256,string)"(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createLiquidityPool(address,uint256,int256,bytes)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deactivatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactivatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAccessController(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAccessController()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAppliedVersionKey(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<{
      appliedVersionKey: string;
      0: string;
    }>;

    "getAppliedVersionKey(address,address)"(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<{
      appliedVersionKey: string;
      0: string;
    }>;

    getKeeperCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getKeeperCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getLatestVersion(overrides?: CallOverrides): Promise<{
      latestVersionKey: string;
      0: string;
    }>;

    "getLatestVersion()"(overrides?: CallOverrides): Promise<{
      latestVersionKey: string;
      0: string;
    }>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getMCBToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getMCBToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSymbolService(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getSymbolService()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getVault(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getVault()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getVaultFeeRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getVaultFeeRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getVersion(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPoolTemplate: string;
      governorTemplate: string;
      compatibility: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    "getVersion(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPoolTemplate: string;
      governorTemplate: string;
      compatibility: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    guardianCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "guardianCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    guardians(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "guardians(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,int256)"(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isGuardian(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isGuardian(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isKeeper(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isKeeper(address)"(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isUniverseSettled(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isUniverseSettled()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isVersionCompatible(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      isCompatible: boolean;
      0: boolean;
    }>;

    "isVersionCompatible(bytes32,bytes32)"(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      isCompatible: boolean;
      0: boolean;
    }>;

    isVersionKeyValid(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      isValid: boolean;
      0: boolean;
    }>;

    "isVersionKeyValid(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      isValid: boolean;
      0: boolean;
    }>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
      0: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
    }>;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
      0: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
    }>;

    listAvailableVersions(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      versionKeys: string[];
      0: string[];
    }>;

    "listAvailableVersions(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      versionKeys: string[];
      0: string[];
    }>;

    listKeepers(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "listKeepers(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    poolVersion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "poolVersion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    registerOperatorOfLiquidityPool(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerOperatorOfLiquidityPool(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeKeeper(
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceGuardian(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceGuardian()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUniverseSettled(overrides?: Overrides): Promise<ContractTransaction>;

    "setUniverseSettled()"(overrides?: Overrides): Promise<ContractTransaction>;

    setVault(
      newVault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVault(address)"(
      newVault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVaultFeeRate(
      newVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVaultFeeRate(int256)"(
      newVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferGuardian(
      toAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferGuardian(address)"(
      toAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "upgradeAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    upgradeToAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(bytes32,bytes,bytes)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  activatePerpetualFor(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activatePerpetualFor(address,uint256)"(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addGuardian(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addGuardian(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addKeeper(
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addKeeper(address)"(
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addVersion(
    liquidityPoolTemplate: string,
    governorTemplate: string,
    compatibility: BigNumberish,
    note: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addVersion(address,address,uint256,string)"(
    liquidityPoolTemplate: string,
    governorTemplate: string,
    compatibility: BigNumberish,
    note: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createLiquidityPool(
    collateral: string,
    collateralDecimals: BigNumberish,
    nonce: BigNumberish,
    initData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createLiquidityPool(address,uint256,int256,bytes)"(
    collateral: string,
    collateralDecimals: BigNumberish,
    nonce: BigNumberish,
    initData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deactivatePerpetualFor(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactivatePerpetualFor(address,uint256)"(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAccessController(overrides?: CallOverrides): Promise<string>;

  "getAccessController()"(overrides?: CallOverrides): Promise<string>;

  getActiveLiquidityPoolCountOf(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getActiveLiquidityPoolCountOf(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAppliedVersionKey(
    liquidityPool: string,
    governor: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAppliedVersionKey(address,address)"(
    liquidityPool: string,
    governor: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getKeeperCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getKeeperCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestVersion(overrides?: CallOverrides): Promise<string>;

  "getLatestVersion()"(overrides?: CallOverrides): Promise<string>;

  getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMCBToken(overrides?: CallOverrides): Promise<string>;

  "getMCBToken()"(overrides?: CallOverrides): Promise<string>;

  getOwnedLiquidityPoolsCountOf(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOwnedLiquidityPoolsCountOf(address)"(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSymbolService(overrides?: CallOverrides): Promise<string>;

  "getSymbolService()"(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  "getVault()"(overrides?: CallOverrides): Promise<string>;

  getVaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "getVaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVersion(
    versionKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    liquidityPoolTemplate: string;
    governorTemplate: string;
    compatibility: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
  }>;

  "getVersion(bytes32)"(
    versionKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    liquidityPoolTemplate: string;
    governorTemplate: string;
    compatibility: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
  }>;

  grantPrivilege(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantPrivilege(address,uint256)"(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

  "guardianCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  guardians(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "guardians(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    symbolService: string,
    globalVault: string,
    globalVaultFeeRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,int256)"(
    symbolService: string,
    globalVault: string,
    globalVaultFeeRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isActiveLiquidityPoolOf(
    trader: string,
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isActiveLiquidityPoolOf(address,address,uint256)"(
    trader: string,
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGranted(
    grantor: string,
    grantee: string,
    privilege: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGranted(address,address,uint256)"(
    grantor: string,
    grantee: string,
    privilege: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGuardian(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isGuardian(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKeeper(keeper: string, overrides?: CallOverrides): Promise<boolean>;

  "isKeeper(address)"(
    keeper: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLiquidityPool(
    liquidityPool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLiquidityPool(address)"(
    liquidityPool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUniverseSettled(overrides?: CallOverrides): Promise<boolean>;

  "isUniverseSettled()"(overrides?: CallOverrides): Promise<boolean>;

  isVersionCompatible(
    targetVersionKey: BytesLike,
    baseVersionKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isVersionCompatible(bytes32,bytes32)"(
    targetVersionKey: BytesLike,
    baseVersionKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVersionKeyValid(
    versionKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isVersionKeyValid(bytes32)"(
    versionKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listActiveLiquidityPoolsOf(
    trader: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }[]
  >;

  "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
    trader: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }[]
  >;

  listAvailableVersions(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listAvailableVersions(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listKeepers(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listKeepers(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listLiquidityPoolOwnedBy(
    operator: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
    operator: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listLiquidityPools(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listLiquidityPools(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "poolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  registerOperatorOfLiquidityPool(
    liquidityPool: string,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerOperatorOfLiquidityPool(address,address)"(
    liquidityPool: string,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeKeeper(
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeKeeper(address)"(
    keeper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceGuardian(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceGuardian()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  revokePrivilege(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokePrivilege(address,uint256)"(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUniverseSettled(overrides?: Overrides): Promise<ContractTransaction>;

  "setUniverseSettled()"(overrides?: Overrides): Promise<ContractTransaction>;

  setVault(
    newVault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVault(address)"(
    newVault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVaultFeeRate(
    newVaultFeeRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVaultFeeRate(int256)"(
    newVaultFeeRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferGuardian(
    toAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferGuardian(address)"(
    toAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeAdmin(overrides?: CallOverrides): Promise<string>;

  "upgradeAdmin()"(overrides?: CallOverrides): Promise<string>;

  upgradeToAndCall(
    targetVersionKey: BytesLike,
    dataForLiquidityPool: BytesLike,
    dataForGovernor: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(bytes32,bytes,bytes)"(
    targetVersionKey: BytesLike,
    dataForLiquidityPool: BytesLike,
    dataForGovernor: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    activatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "activatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addGuardian(account: string, overrides?: CallOverrides): Promise<void>;

    "addGuardian(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addKeeper(keeper: string, overrides?: CallOverrides): Promise<void>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addVersion(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "addVersion(address,address,uint256,string)"(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPool: string;
      governor: string;
      0: string;
      1: string;
    }>;

    "createLiquidityPool(address,uint256,int256,bytes)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPool: string;
      governor: string;
      0: string;
      1: string;
    }>;

    deactivatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deactivatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAccessController(overrides?: CallOverrides): Promise<string>;

    "getAccessController()"(overrides?: CallOverrides): Promise<string>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppliedVersionKey(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAppliedVersionKey(address,address)"(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getKeeperCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getKeeperCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestVersion(overrides?: CallOverrides): Promise<string>;

    "getLatestVersion()"(overrides?: CallOverrides): Promise<string>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMCBToken(overrides?: CallOverrides): Promise<string>;

    "getMCBToken()"(overrides?: CallOverrides): Promise<string>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSymbolService(overrides?: CallOverrides): Promise<string>;

    "getSymbolService()"(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    "getVault()"(overrides?: CallOverrides): Promise<string>;

    getVaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPoolTemplate: string;
      governorTemplate: string;
      compatibility: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    "getVersion(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      liquidityPoolTemplate: string;
      governorTemplate: string;
      compatibility: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
    }>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

    "guardianCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    guardians(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "guardians(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,int256)"(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGuardian(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isGuardian(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKeeper(keeper: string, overrides?: CallOverrides): Promise<boolean>;

    "isKeeper(address)"(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUniverseSettled(overrides?: CallOverrides): Promise<boolean>;

    "isUniverseSettled()"(overrides?: CallOverrides): Promise<boolean>;

    isVersionCompatible(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isVersionCompatible(bytes32,bytes32)"(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVersionKeyValid(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isVersionKeyValid(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[]
    >;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[]
    >;

    listAvailableVersions(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listAvailableVersions(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listKeepers(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listKeepers(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "poolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperatorOfLiquidityPool(
      liquidityPool: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerOperatorOfLiquidityPool(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeKeeper(keeper: string, overrides?: CallOverrides): Promise<void>;

    "removeKeeper(address)"(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceGuardian(overrides?: CallOverrides): Promise<void>;

    "renounceGuardian()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniverseSettled(overrides?: CallOverrides): Promise<void>;

    "setUniverseSettled()"(overrides?: CallOverrides): Promise<void>;

    setVault(newVault: string, overrides?: CallOverrides): Promise<void>;

    "setVault(address)"(
      newVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultFeeRate(
      newVaultFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVaultFeeRate(int256)"(
      newVaultFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferGuardian(
      toAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferGuardian(address)"(
      toAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeAdmin(overrides?: CallOverrides): Promise<string>;

    "upgradeAdmin()"(overrides?: CallOverrides): Promise<string>;

    upgradeToAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(bytes32,bytes,bytes)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddGuardian(account: string | null): EventFilter;

    AddKeeperToWhitelist(keeper: string | null): EventFilter;

    AddVersion(
      versionKey: null,
      liquidityPoolTemplate: string | null,
      governorTemplate: string | null,
      creator: string | null,
      compatibility: null,
      note: null
    ): EventFilter;

    CreateLiquidityPool(
      versionKey: null,
      liquidityPool: string | null,
      governor: string | null,
      operator: string | null,
      shareToken: null,
      collateral: null,
      collateralDecimals: null,
      initData: null
    ): EventFilter;

    GrantPrivilege(
      grantor: string | null,
      grantee: string | null,
      privilege: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RemoveKeeperFromWhitelist(keeper: string | null): EventFilter;

    RenounceGuardian(account: string | null): EventFilter;

    RevokePrivilege(
      grantor: string | null,
      grantee: string | null,
      privilege: null
    ): EventFilter;

    SetKeeper(previousKeeper: null, newKeeper: null): EventFilter;

    SetRewardDistributor(
      previousRewardDistributor: null,
      newRewardDistributor: null
    ): EventFilter;

    SetUniverseSettled(): EventFilter;

    SetVault(previousVault: null, newVault: null): EventFilter;

    SetVaultFeeRate(prevFeeRate: null, newFeeRate: null): EventFilter;

    TransferGuardian(
      fromAccount: string | null,
      toAccount: string | null
    ): EventFilter;

    UpgradeLiquidityPool(
      versionKey: null,
      liquidityPool: string | null,
      governor: string | null
    ): EventFilter;
  };

  estimateGas: {
    activatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "activatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addGuardian(account: string, overrides?: Overrides): Promise<BigNumber>;

    "addGuardian(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addKeeper(keeper: string, overrides?: Overrides): Promise<BigNumber>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addVersion(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addVersion(address,address,uint256,string)"(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createLiquidityPool(address,uint256,int256,bytes)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deactivatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deactivatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAccessController(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccessController()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppliedVersionKey(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAppliedVersionKey(address,address)"(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeeperCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getKeeperCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getLatestVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMCBToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getMCBToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSymbolService(overrides?: CallOverrides): Promise<BigNumber>;

    "getSymbolService()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVersion(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

    "guardianCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    guardians(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "guardians(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,int256)"(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGuardian(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isGuardian(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKeeper(keeper: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isKeeper(address)"(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUniverseSettled(overrides?: CallOverrides): Promise<BigNumber>;

    "isUniverseSettled()"(overrides?: CallOverrides): Promise<BigNumber>;

    isVersionCompatible(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVersionCompatible(bytes32,bytes32)"(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVersionKeyValid(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVersionKeyValid(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAvailableVersions(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listAvailableVersions(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listKeepers(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listKeepers(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "poolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperatorOfLiquidityPool(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerOperatorOfLiquidityPool(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeKeeper(keeper: string, overrides?: Overrides): Promise<BigNumber>;

    "removeKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceGuardian(overrides?: Overrides): Promise<BigNumber>;

    "renounceGuardian()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUniverseSettled(overrides?: Overrides): Promise<BigNumber>;

    "setUniverseSettled()"(overrides?: Overrides): Promise<BigNumber>;

    setVault(newVault: string, overrides?: Overrides): Promise<BigNumber>;

    "setVault(address)"(
      newVault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVaultFeeRate(
      newVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVaultFeeRate(int256)"(
      newVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferGuardian(
      toAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferGuardian(address)"(
      toAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeToAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeToAndCall(bytes32,bytes,bytes)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addGuardian(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addGuardian(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addKeeper(
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addVersion(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addVersion(address,address,uint256,string)"(
      liquidityPoolTemplate: string,
      governorTemplate: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createLiquidityPool(address,uint256,int256,bytes)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      nonce: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deactivatePerpetualFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactivatePerpetualFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAccessController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccessController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppliedVersionKey(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAppliedVersionKey(address,address)"(
      liquidityPool: string,
      governor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeeperCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getKeeperCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLatestVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPoolCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPoolCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMCBToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMCBToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSymbolService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSymbolService()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVaultFeeRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVersion(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    guardianCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guardianCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardians(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "guardians(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,int256)"(
      symbolService: string,
      globalVault: string,
      globalVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGuardian(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGuardian(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeeper(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKeeper(address)"(
      keeper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUniverseSettled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isUniverseSettled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVersionCompatible(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVersionCompatible(bytes32,bytes32)"(
      targetVersionKey: BytesLike,
      baseVersionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVersionKeyValid(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVersionKeyValid(bytes32)"(
      versionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAvailableVersions(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listAvailableVersions(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listKeepers(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listKeepers(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperatorOfLiquidityPool(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerOperatorOfLiquidityPool(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeKeeper(
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeKeeper(address)"(
      keeper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceGuardian(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceGuardian()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUniverseSettled(overrides?: Overrides): Promise<PopulatedTransaction>;

    "setUniverseSettled()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVault(
      newVault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVault(address)"(
      newVault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVaultFeeRate(
      newVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVaultFeeRate(int256)"(
      newVaultFeeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferGuardian(
      toAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferGuardian(address)"(
      toAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "upgradeAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(bytes32,bytes,bytes)"(
      targetVersionKey: BytesLike,
      dataForLiquidityPool: BytesLike,
      dataForGovernor: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
