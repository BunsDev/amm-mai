/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OracleRouterCreatorInterface extends ethers.utils.Interface {
  functions: {
    "createOracleRouter(tuple[])": FunctionFragment;
    "getPathHash(tuple[])": FunctionFragment;
    "routers(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createOracleRouter",
    values: [{ oracle: string; isInverse: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPathHash",
    values: [{ oracle: string; isInverse: boolean }[]]
  ): string;
  encodeFunctionData(functionFragment: "routers", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "createOracleRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPathHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;

  events: {
    "NewOracleRouter(address,string,string,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewOracleRouter"): EventFragment;
}

export class OracleRouterCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OracleRouterCreatorInterface;

  functions: {
    createOracleRouter(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createOracleRouter(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPathHash(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPathHash(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    routers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "routers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  createOracleRouter(
    path: { oracle: string; isInverse: boolean }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createOracleRouter(tuple[])"(
    path: { oracle: string; isInverse: boolean }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPathHash(
    path: { oracle: string; isInverse: boolean }[],
    overrides?: CallOverrides
  ): Promise<string>;

  "getPathHash(tuple[])"(
    path: { oracle: string; isInverse: boolean }[],
    overrides?: CallOverrides
  ): Promise<string>;

  routers(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "routers(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createOracleRouter(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<string>;

    "createOracleRouter(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<string>;

    getPathHash(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<string>;

    "getPathHash(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<string>;

    routers(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "routers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    NewOracleRouter(
      router: null,
      collateral: null,
      underlyingAsset: null,
      path: null
    ): EventFilter;
  };

  estimateGas: {
    createOracleRouter(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createOracleRouter(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPathHash(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPathHash(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routers(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "routers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createOracleRouter(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createOracleRouter(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPathHash(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPathHash(tuple[])"(
      path: { oracle: string; isInverse: boolean }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "routers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
