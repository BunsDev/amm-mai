/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UniswapV3OracleAdaptorCreatorInterface
  extends ethers.utils.Interface {
  functions: {
    "adaptors(bytes32)": FunctionFragment;
    "createAdaptor(address,address[],uint24[],uint32,uint32)": FunctionFragment;
    "getAdaptorDataHash(tuple)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adaptors", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "createAdaptor",
    values: [string, string[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdaptorDataHash",
    values: [
      {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "adaptors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAdaptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdaptorDataHash",
    data: BytesLike
  ): Result;

  events: {
    "NewUniswapV3OracleAdaptor(address,address[],uint24[],uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewUniswapV3OracleAdaptor"): EventFragment;
}

export class UniswapV3OracleAdaptorCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UniswapV3OracleAdaptorCreatorInterface;

  functions: {
    adaptors(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "adaptors(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    createAdaptor(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAdaptor(address,address[],uint24[],uint32,uint32)"(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAdaptorDataHash(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAdaptorDataHash(tuple)"(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  adaptors(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "adaptors(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  createAdaptor(
    factory: string,
    path: string[],
    fees: BigNumberish[],
    shortPeriod: BigNumberish,
    longPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAdaptor(address,address[],uint24[],uint32,uint32)"(
    factory: string,
    path: string[],
    fees: BigNumberish[],
    shortPeriod: BigNumberish,
    longPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAdaptorDataHash(
    adaptorData: {
      path: string[];
      fees: BigNumberish[];
      shortPeriod: BigNumberish;
      longPeriod: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "getAdaptorDataHash(tuple)"(
    adaptorData: {
      path: string[];
      fees: BigNumberish[];
      shortPeriod: BigNumberish;
      longPeriod: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    adaptors(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "adaptors(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    createAdaptor(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createAdaptor(address,address[],uint24[],uint32,uint32)"(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAdaptorDataHash(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "getAdaptorDataHash(tuple)"(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    NewUniswapV3OracleAdaptor(
      adaptor: null,
      path: null,
      fees: null,
      shortPeriod: null,
      longPeriod: null
    ): EventFilter;
  };

  estimateGas: {
    adaptors(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "adaptors(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAdaptor(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAdaptor(address,address[],uint24[],uint32,uint32)"(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAdaptorDataHash(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdaptorDataHash(tuple)"(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adaptors(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "adaptors(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAdaptor(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAdaptor(address,address[],uint24[],uint32,uint32)"(
      factory: string,
      path: string[],
      fees: BigNumberish[],
      shortPeriod: BigNumberish,
      longPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAdaptorDataHash(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdaptorDataHash(tuple)"(
      adaptorData: {
        path: string[];
        fees: BigNumberish[];
        shortPeriod: BigNumberish;
        longPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
